public class PilhaDupla implements Stackable {

    private int pointerTop1;
    private int pointerTop2;
    private Object[] data;

    public PilhaDupla(int tamanho) {
        pointerTop1 = -1;
        pointerTop2 = tamanho;
        data = new Object[tamanho];
    }

    public PilhaDupla() {
        this(10);
    }
    public void push1(Object elemento) {
        if (!isFull1()) {
            pointerTop1++;
            data[pointerTop1] = elemento;
        } else {
            System.out.println("Pilha 1 Cheia!");
        }
    }

    public Object pop1() {
        Object elemento = null;
        if (!isEmpty1()) {
            elemento = data[pointerTop1];
            data[pointerTop1] = null;
            pointerTop1--;
        } else {
            System.out.println("Pilha 1 Vazia!");
        }
        return elemento;
    }

    public Object peek1() {
        if (!isEmpty1()) {
            return data[pointerTop1];
        } else {
            System.out.println("Pilha 1 Vazia!");
            return null;
        }
    }

    public boolean isFull1() {
        return (pointerTop1 + 1 == pointerTop2);
    }

    public boolean isEmpty1() {
        return (pointerTop1 == -1);
    }
    public void push2(Object elemento) {
        if (!isFull2()) {
            pointerTop2--;
            data[pointerTop2] = elemento;
        } else {
            System.out.println("Pilha 2 Cheia!");
        }
    }

    public Object pop2() {
        Object elemento = null;
        if (!isEmpty2()) {
            elemento = data[pointerTop2];
            data[pointerTop2] = null;
            pointerTop2++;
        } else {
            System.out.println("Pilha 2 Vazia!");
        }
        return elemento;
    }

    public Object peek2() {
        if (!isEmpty2()) {
            return data[pointerTop2];
        } else {
            System.out.println("Pilha 2 Vazia!");
            return null;
        }
    }

    public boolean isFull2() {
        return (pointerTop2 - 1 == pointerTop1);
    }

    public boolean isEmpty2() {
        return (pointerTop2 == data.length);
    }
    @Override
    public void push(Object elemento) {
        push1(elemento);
    }

    @Override
    public Object pop() {
        return pop1();
    }

    @Override
    public Object peek() {
        return peek1();
    }

    @Override
    public void uptade(Object elemento) {
        if (!isEmpty1()) {
            data[pointerTop1] = elemento;
        } else {
            System.out.println("Pilha 1 Vazia!");
        }
    }

    @Override
    public boolean isFull() {
        return isFull1();
    }

    @Override
    public boolean isEmpty() {
        return isEmpty1();
    }

    @Override
    public String print() {
        return "";
    }
    public void empilhar1(Object elemento) {
        push1(elemento);
    }

    public void empilhar2(Object elemento) {
        push2(elemento);
    }

    public Object desempilhar1() {
        return pop1();
    }

    public Object desempilhar2() {
        return pop2();
    }

    public Object espiar1() {
        return peek1();
    }

    public Object espiar2() {
        return peek2();
    }

    public boolean estaCheia1() {
        return isFull1();
    }

    public boolean estaCheia2() {
        return isFull2();
    }

    public boolean estaVazia1() {
        return isEmpty1();
    }

    public boolean estaVazia2() {
        return isEmpty2();
    }
}
